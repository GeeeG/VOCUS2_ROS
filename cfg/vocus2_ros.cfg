#!/usr/bin/env python
PACKAGE = "vocus2_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

fusion_enum = gen.enum([ gen.const("Arithmetic_mean",      int_t, 0, "Arithmetic mean"),
                       gen.const("Max",     int_t, 1, "Max"),
                       gen.const("Uniqueness_weight",      int_t, 2, "Uniqueness weight"),
                       gen.const("Individual_weights",      int_t, 3, "Individual weights")],
                     "Fusion modes")

cspace_enum = gen.enum([ gen.const("Lab",      int_t, 0, "Lab color space"),
                       gen.const("Opponent_CODI",     int_t, 1, "Klein/Frintrop DAGM 2012"),
                       gen.const("Opponent",      int_t, 2, "like above but shifted and scaled to [0,1]"),
		       gen.const("Itti",      int_t, 3, "splitted RG and BY channels")],
                     "Color spaces")

gen.add("restore_default",   bool_t,   0, "Restore default configuration",  False)
gen.add("num_foci",    int_t,    0, "Number of Foci", 1, 1, 5)
gen.add("start_layer",    int_t,    0, "First pyramid layer that is used", 0, 0, 6)
gen.add("stop_layer",    int_t,    0, "Last pyramid layer that is used", 4, 0, 6)
gen.add("center_sigma",    int_t,    0, "Center Sigma", 3, 1, 6)
gen.add("surround_sigma",    int_t,    0, "Surround Sigma", 13, 5, 20)
gen.add("n_scales",    int_t,    0, "Number of scales per layer", 2, 1, 5)
gen.add("msr_thresh", double_t, 0, "Threshold of MSR",    .75, 0.5,   1)
gen.add("normalize",   bool_t,   0, "Normalize input",  True)
gen.add("orientation",   bool_t,   0, "Use orientation feature",  False)
gen.add("combined_features",   bool_t,   0, "Use combined features",  False)
gen.add("topdown_learn",   bool_t,   0, "Enable top down learning",  False)
gen.add("topdown_search",   bool_t,   0, "Enable top down search",  False)
gen.add("center_bias",   bool_t,   0, "Enable center bias",  False)
gen.add("center_bias_value", double_t, 0, "Magnitude of center bias",    0.000005, 0.0000005,   0.0005)
gen.add("c_space", int_t, 0, "Color space", 1, 0, 3, edit_method=cspace_enum)
gen.add("fuse_feature", int_t, 0, "Specifies how feature maps should be fused to generate the conspicuity maps", 0, 0, 3, edit_method=fusion_enum)
gen.add("fuse_conspicuity", int_t, 0, "Specifies how conspicuity maps are fused", 0, 0, 3, edit_method=fusion_enum)

# conspicuity map weights
gen.add("consp_intensity_on_off_weight", double_t, 0, "Saliency map: Weight of intensity on_off fusion",    .25, 0,   1)
gen.add("color_channel_1_weight", double_t, 0, "Saliency map: Weight of color channel 1 (channel a) [OR: weight of Color Channel in Combined Features mode] ", .25, 0,   1)
gen.add("color_channel_2_weight", double_t, 0, "Saliency map: Weight of color channel 2 (channel b) [OR: ignored in Combined Feautures mode]", .25, 0,   1)
gen.add("orientation_channel_weight", double_t, 0, "Saliency map: Weight of orientation channel [OR: ignored if no orientation channel]", .25, 0,   1)

# feature map weights
gen.add("intensity_on_off_weight", double_t, 0, "Weight of intensity on-off",    .5, 0,   1)
gen.add("intensity_off_on_weight", double_t, 0, "Weight of intensity off-on",    .5, 0,   1)
gen.add("color_a_on_off_weight", double_t, 0, "Color a channel on-off",    .5, 0,   1)
gen.add("color_a_off_on_weight", double_t, 0, "Color a channel off-on",    .5, 0,   1)
gen.add("color_b_on_off_weight", double_t, 0, "Color b channel on-of",    .5, 0,   1)
gen.add("color_b_off_on_weight", double_t, 0, "Color a channel off-on",    .5, 0,   1)
gen.add("orientation_1_weight", double_t, 0, "Orientation channel 1",    .25, 0,   1)
gen.add("orientation_2_weight", double_t, 0, "Orientation channel 2",    .25, 0,   1)
gen.add("orientation_3_weight", double_t, 0, "Orientation channel 3",    .25, 0,   1)
gen.add("orientation_4_weight", double_t, 0, "Orientation channel 4",    .25, 0,   1)




exit(gen.generate(PACKAGE, "vocus2_ros", "vocus2_ros"))
